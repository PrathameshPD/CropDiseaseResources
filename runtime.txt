import re
import io
import pandas as pd
from typing import List, TypedDict, Any, Annotated 
from io import BytesIO
from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import (
    BaseMessage,
)
from langgraph.graph import StateGraph, START, END, MessagesState
from langchain.tools import Tool
from langchain.agents import initialize_agent
from modules.llm_client import AzureChatClient, AzureStorageClient
from recon_agent import get_dsl_report 
from process_gas import get_GAS_report
from RAG_tool import RAGSystem

client = AzureChatClient.init_openai_client()

rag_system = RAGSystem()
class Tools:
    @staticmethod
    def get_DSL_report(*args, **kwargs):
        try:
            sap_df = pd.read_excel(
                "data/0425_KM-PAS(03XP)_WorkingFile.xlsx", sheet_name="SAP (All Products)"
            )
            km_df = pd.read_excel(
                "data/0425_KM-PAS(03XP)_WorkingFile.xlsx", sheet_name="KM RAW DSL"
            )
            report_df = get_dsl_report(sap_dsl_df=sap_df, km_dsl_df=km_df)

            file_name = "03XP_DSL_report.xlsx"
            upload_msg = AzureStorageClient.upload_to_blob(file_name=file_name, content=report_df)

            return f"{upload_msg} : The Reconciliation for DSL is complete."
        except FileNotFoundError:
            return "Error: The source data file '0425_KM-PAS(03XP)_WorkingFile.xlsx' was not found."
        except Exception as e:
            return f"An unexpected error occurred while generating the DSL report: {e}"

    @staticmethod
    def get_GAS_report(*args, **kwargs):
        try:
            sap_df = pd.read_excel(
                "data/0425_KM-PAS(03XP)_WorkingFile.xlsx", sheet_name="SAP (All Products)"
            )
            km_df = pd.read_excel(
                "data/0425_KM-PAS(03XP)_WorkingFile.xlsx", sheet_name="KM RAW GAS"
            )
            report_df = get_GAS_report(sap_gas_df=sap_df, km_gas_df=km_df)

            file_name = "03XP_GAS_report.xlsx"
            upload_msg = AzureStorageClient.upload_to_blob(file_name=file_name, content=report_df)

            return f"{upload_msg} : The Reconciliation for GAS is complete."
        except FileNotFoundError:
            return "Error: The source data file '0425_KM-PAS(03XP)_WorkingFile.xlsx' was not found."
        except Exception as e:
            return f"An unexpected error occurred while generating the GAS report: {e}"

    @staticmethod
    def get_informative_query_response(
        query: Annotated[str, "The informative question from the user."],
    ):
        response = rag_system.ask(query)
        return response

class ToolBuilder:
    @staticmethod
    def _for_03XP():
        return [
            Tool(
                name="Informative Query Response Retrieval",
                func=Tools.get_informative_query_response,
                description="Returns response of Informative Query",
            ),
            Tool(
                name="Get DSL(Diesel) report",
                func=Tools.get_DSL_report,
                description="Returns report for DSL(Diesel) category",
            ),
            Tool(
                name="Get GAS(Gasoline) report",
                func=Tools.get_GAS_report,
                description="Returns report for GAS(Gasoline) category",
            ),
        ]


class AgentInitializer:
    @staticmethod
    def agent_03XP():
        return initialize_agent(
            tools=ToolBuilder._for_03XP(),
            llm=client,
            agent="zero-shot-react-description",
            verbose=True,
        )

# Initialize the agent once 
agent_03XP_instance = AgentInitializer.agent_03XP()

class Nodes:
    @staticmethod
    def agent_03XP(state):
        sys_msg = """  
        You are reconciliation agent for Phillips 66, handling GAS (Gasoline) and DSL (Diesel) products at plant 03XP. 
        **Workflow**: 
        - If the query is informative, then use "get_informative_query_response" , put informative query in input and give that response as your final answer. 
        - If the query is irrelevant, just respond that you can only help in reconciliation process of GAS and DSL for 03XP Plant and politely reject the query.
        - If the query is asking for a report for DSL, use the tool "get_DSL_report". It will return a string confirming the report is ready.
        - If the query is asking for a report for GAS, use the tool "get_GAS_report". It will return a string response confirming the report is ready.
        - If the query is asking for both reports, use both the tools and combine the results. 
        - attach URL in the markdown, making the response look really well formatted. 
        - Example output: 
        - # 📝 Reconciliation Reports
            ## GAS Report
            🗹 GAS report is ready. You can check it from the following link:
            [here](url link)

            ## DSL Report
            🗹 DSL report is ready. You can check it from the following link:
            [here](url link)       
        """
        chat_prompt = ChatPromptTemplate.from_messages(
            [
                ("system", sys_msg),
                ("human", "{query}"),
            ]
        )
        full_prompt = chat_prompt.format_messages(query=state["query"])

        # invoke with both query and chat_history parameters
        query_type = agent_03XP_instance.invoke(
            {"input": full_prompt}, handle_parsing_errors=True
        )
        return {"agent_response": query_type["output"].strip()}

    @staticmethod
    def process_agent_response(state):
        url_pattern = r'https?://[^\s)>\]"\'}]+'
        agent_response = state["agent_response"]

        # find all URLs in the agent_response string
        urls = re.findall(url_pattern, agent_response)
        return {
            "final_output": {
                "type": "text",
                "data": state["agent_response"],
                "blob_urls": urls,
            }
        }

class MessagesState(TypedDict):
    query: str
    messages: List[BaseMessage]
    agent_response: str
    file_check_result: str
    path_to_03XP_plant_files: str
    available_03XP_files: List
    final_output: Any

class WorkflowBuilder:
    @staticmethod
    def build_graph():
        graph = StateGraph(MessagesState)

        graph.add_node("agent_03XP", Nodes.agent_03XP)
        graph.add_node("process_agent_response", Nodes.process_agent_response)
        graph.add_edge(START, "agent_03XP")
        graph.add_edge("agent_03XP", "process_agent_response")
        graph.add_edge("process_agent_response", END)

        graph.set_entry_point("agent_03XP")
        app = graph.compile()
        print("Node names: ", list(graph.nodes))
        print("Graph Edges: ", graph.edges)
        return app

